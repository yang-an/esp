C166 COMPILER V7.53.0.0, ADC                                                               04/30/2018 11:14:25 PAGE 1   


C166 COMPILER V7.53.0.0, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN ADC.OBJ
COMPILER INVOKED BY: C:\Keil\C166\BIN\C166.EXE ADC.C COMPACT OPTIMIZE(0,SPEED) BROWSE MOD167 DEBUG TABS(2) 

 stmt lvl     source

    1         //****************************************************************************
    2         // @Module        ADC
    3         // @Filename      ADC.C
    4         // @Project       v2.dav
    5         //----------------------------------------------------------------------------
    6         // @Controller    Infineon C164CI-8E
    7         //
    8         // @Compiler      KEIL C166
    9         //
   10         // @Codegenerator DAvE 2-0-0
   11         //
   12         // @Description   This file contains all functions that use the ADC peripheral
   13         //                
   14         //
   15         //----------------------------------------------------------------------------
   16         // @Date          30.04.2018 10:46:31
   17         //
   18         //****************************************************************************
   19         
   20         
   21         //****************************************************************************
   22         // @Project Includes
   23         //****************************************************************************
   24         
   25         #include "MAIN.H"
   26         
   27         // USER CODE BEGIN (ADC_General,1)
   28         
   29         // USER CODE END
   30         
   31         
   32         //***************************************************************************
   33         // @Global Variables
   34         //***************************************************************************
   35         
   36         // USER CODE BEGIN (ADC_General,2)
   37         
   38         /* 0, 3, 6, ... : Ch0
   39            1, 4, 7, ... : Ch1
   40            2, 5, 8, ... : Ch2
   41         */
   42         unsigned avgbuf[BUFSIZE];
   43         // USER CODE END
   44         
   45         
   46         //****************************************************************************
   47         // @Function      void ADC_vInit(void)
   48         //
   49         //----------------------------------------------------------------------------
   50         // @Description   This function initializes the ADC component. It effects all
   51         //                necessary configurations of the SFR, depending on the selected
   52         //                operating mode. The configuration determines whether the ADC
   53         //                interrupts are to be released, and the priority of the 
   54         //                released interrupt.
   55         //
C166 COMPILER V7.53.0.0, ADC                                                               04/30/2018 11:14:25 PAGE 2   

   56         //----------------------------------------------------------------------------
   57         // @Returnvalue   none
   58         //
   59         //----------------------------------------------------------------------------
   60         // @Parameters    none
   61         //
   62         //----------------------------------------------------------------------------
   63         // @Date          30.04.2018 10:46:31
   64         //
   65         //****************************************************************************
   66         
   67         void ADC_vInit(void)
   68         {
   69  1        /// digital input stage is disconnected from port line P5.0
   70  1        /// digital input stage is disconnected from port line P5.1
   71  1        /// digital input stage is disconnected from port line P5.2
   72  1        /// digital input stage is disconnected from port line P5.3
   73  1        /// digital input stage is disconnected from port line P5.4
   74  1        /// digital input stage is disconnected from port line P5.5
   75  1        /// digital input stage is disconnected from port line P5.6
   76  1        /// digital input stage is disconnected from port line P5.7
   77  1      
   78  1        P5DIDIS = 0x00FF;
   79  1      
   80  1        ///  enable ADC interrupt
   81  1        ///  ADC interrupt priority level(ILVL) = 2
   82  1        ///  ADC interrupt group level (GLVL) = 1
   83  1        ADCIC = 0x0049;
   84  1      
   85  1        /// fixed channel single conversion
   86  1        /// converts channel 0
   87  1        /// ADC start bit is reset
   88  1        /// converter clock = fcpu / 24 (1,200 µs)
   89  1        /// sample time = 9,600 µs 
   90  1        ADCON   = 0x0000;
   91  1      
   92  1        //  USER CODE BEGIN (ADC_Init,1)
   93  1      
   94  1        //  USER CODE END
   95  1      
   96  1      }
   97         
   98         
   99         //****************************************************************************
  100         // @Function      uword ADC_uwReadConv(void)
  101         //
  102         //----------------------------------------------------------------------------
  103         // @Description   This function returns the result of a conversion.
  104         //                This function must be called after each conversion.
  105         //                The lower 10 bits contain the conversion result
  106         //                while the upper 4 bits identify the converted
  107         //                analog channel.
  108         //
  109         //----------------------------------------------------------------------------
  110         // @Returnvalue   conversion result
  111         //
  112         //----------------------------------------------------------------------------
  113         // @Parameters    none
  114         //
  115         //----------------------------------------------------------------------------
  116         // @Date          30.04.2018 10:46:31
  117         //
C166 COMPILER V7.53.0.0, ADC                                                               04/30/2018 11:14:25 PAGE 3   

  118         //****************************************************************************
  119         
  120         uword ADC_uwReadConv(void)
  121         {
  122  1        return(ADDAT);
  123  1      }
  124         
  125         
  126         //****************************************************************************
  127         // @Function      void ADC_viIsrConv(void) interrupt ADCINT
  128         //
  129         //----------------------------------------------------------------------------
  130         // @Description   This is the interrupt service routine for the ADC.
  131         //                It is called at the end of each conversion. The user
  132         //                obtains the conversion result by calling the function
  133         //                ADC_uwReadConv.
  134         //                
  135         //                Please note that you have to add application specific
  136         //                code to this function.
  137         //
  138         //----------------------------------------------------------------------------
  139         // @Returnvalue   none
  140         //
  141         //----------------------------------------------------------------------------
  142         // @Parameters    none
  143         //
  144         //----------------------------------------------------------------------------
  145         // @Date          30.04.2018 10:46:31
  146         //
  147         //****************************************************************************
  148         
  149         void ADC_viIsrConv(void) interrupt ADCINT
  150         {
  151  1        // USER CODE BEGIN (ADC_IsrConv,1)
  152  1        isr_send_signal(4);
  153  1        // USER CODE END
  154  1      }
  155         
  156         
  157         
  158         
  159         // USER CODE BEGIN (ADC_General,3)
  160         void adc_tsk() _task_ 4 {
  161  1        unsigned char avgbuf_idx = 0;
  162  1        
  163  1        for (;;) {
  164  2          
  165  2          ADC_vConfConv(FIXED, avgbuf_idx % 3);
  166  2          ADC_vStartConv();
  167  2          
  168  2          os_wait(K_SIG, 0, 0);
  169  2          
  170  2          avgbuf[avgbuf_idx] = ADC_uwReadConv() & 0x03FF;
  171  2          avgbuf_idx = ++avgbuf_idx % BUFSIZE;
*** WARNING C192 IN LINE 171 OF ADC.C: '=': value truncated
  172  2          
  173  2          os_wait(K_IVL, 10, 0);
  174  2        }
  175  1      }
  176         
  177         float fGibADmittel(unsigned char ch) {
  178  1        int i;
C166 COMPILER V7.53.0.0, ADC                                                               04/30/2018 11:14:25 PAGE 4   

  179  1        float ret = 0;
  180  1        
  181  1        if (ch > CHCNT - 1)
  182  1          return -1;
  183  1        
  184  1        for (i = ch; i < BUFSIZE; i+=CHCNT)
  185  1          ret += avgbuf[i];
  186  1        
  187  1        return ret / (BUFSIZE / CHCNT);
  188  1      }
  189         
  190         float fGibGewicht() {
  191  1        float ret = 0;
  192  1        int i;
  193  1        
  194  1        for (i=0; i<CHCNT; i++)
  195  1          ret += fGibADmittel(i);
  196  1        
  197  1        return ret;
  198  1      }
  199         // USER CODE END
  200         


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         470     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =    --------     --------
  FAR-DATA SIZE    =         120     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =    --------     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
