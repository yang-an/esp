A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE     1


MACRO ASSEMBLER A166 V5.36.0.1
OBJECT MODULE PLACED IN Start167.OBJ
ASSEMBLER INVOKED BY: C:\Keil\C166\BIN\A166.EXE Start167.a66 SEGMENTED MOD167 SET(COMPACT) DEBUG EP

LOC      OBJ             LINE     SOURCE

                            1     $MOD167                                 ; Define C167 mode
                            2     ;
                            3     ;------------------------------------------------------------------------------
                            4     ;  This file is part of the C166 Compiler package
                            5     ;  Copyright KEIL ELEKTRONIK GmbH 1993 - 2008
                            6     ;  Version 5.02
                            7     ;------------------------------------------------------------------------------
                            8     ;  START167.A66:  This code is executed after processor reset and provides the
                            9     ;                 startup sequence for the extended 166 architecture CPU's.
                           10     ;                 (i.e. C167/C165/C164/C163/C161, ST10-168/262/269 ect.)
                           11     ;
                           12     ;  To translate this file use A166 with the following invocation:
                           13     ;
                           14     ;     A166 START167.A66 SET (<model>)
                           15     ;
                           16     ;     <model> determines the memory model and can be one of the following:
                           17     ;         TINY, SMALL, COMPACT, HCOMPACT, MEDIUM, LARGE, HLARGE, XLARGE
                           18     ;
                           19     ;  Example:  A166 START167.A66 SET (SMALL)
                           20     ;
                           21     ;  To link the modified START167.OBJ file to your application use the following
                           22     ;  L166 invocation:
                           23     ;
                           24     ;     L166 <your object file list>, START167.OBJ <controls>
                           25     ;
                           26     ;------------------------------------------------------------------------------
                           27     ; Setup model-dependend Assembler controls
                           28     $CASE
                           29     $IF NOT TINY
                           30     $SEGMENTED
                           31     $ENDIF
                           32     ;------------------------------------------------------------------------------
                           33     ;
                           34     ; Definitions for BUSCON0 and SYSCON Register:
                           35     ; --------------------------------------------
                           36     ;
                           37     ; MCTC0: Memory Cycle Time (BUSCON0.0 .. BUSCON0.3):
                           38     ; Note: if RDYEN0 == 1 a maximum number of 7 waitstates can be selected
 000F                      39     _MCTC0 EQU 15 ; Memory wait states is 1 (MCTC0 field = 0EH). /Dave/   
                           40     ;                       ; (Reset Value = 15 additional state times)
                           41     ;
                           42     ; RWDC0: Read/Write Signal Delay (BUSCON0.4):
 0000                      43     _RWDC0 EQU 0 ; 0 = Delay Time     0.5 States (Reset Value)   /Dave/   
                           44     ;                       ; 1 = No Delay Time  0   States
                           45     ;
                           46     ; MTTC0: Memory Tri-state Time (BUSCON0.5):
 0000                      47     _MTTC0 EQU 0 ; 0 = Delay Time     1   States (Reset Value) /Dave/   
                           48     ;                       ; 1 = No Delay Time  0   States
                           49     ;
                           50     $SET (BTYP_ENABLE = 0)  ; 0 = BTYP0 and BUSACT0 is set according to the level
                           51                             ;     at pins P0L.6, P0L.7, and EA# during reset.
                           52                             ; 1 = the following _BTYP0 and _BUSACT0 values are
                           53                             ;     written to BTYP0 and BUSACT0
                           54     ;
                           55     ; BTYP0: External Bus Configuration Control (BUSCON0.6 .. BUSCON0.7):
 0003                      56     _BTYP0 EQU 3 ; 0 = 8 Bit Non Multiplexed /Dave/   
                           57     ;                       ; 1 = 8 Bit Multiplexed
                           58     ;                       ; 2 = 16 Bit Non Multiplexed
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE     2

                           59     ;                       ; 3 = 16 Bit Multiplexed
                           60     ;
                           61     ; ALECTL0: ALE Lengthening Control Bit (BUSCON0.9):
 0001                      62     _ALECTL0 EQU 1 ; see data sheet for description /Dave/   
                           63     ;
                           64     ; BUSACT0: Bus Active Control Bit (BUSCON0.10):
 0001                      65     _BUSACT0 EQU 1 ; = 0 external bus disabled /Dave/   
                           66                             ; = 1 external bus enabled
                           67     ;
                           68     ; RDYEN0: READY# Input Enable control bit (BUSCON0.12):
 0000                      69     _RDYEN0 EQU 0 ; 0 = READY# function disabled  (Reset Value) /Dave/   
                           70     ;                       ; 1 = READY# function enabled
                           71     ;
                           72     ; RDY_AS0: Synchronous / Asynchronous READY# Input (BUSCON0.3):
                           73     ; Note: This bit is only valid if _RDYEN0 == 1.
 0000                      74     _RDY_AS0 EQU    0       ; 0 = synchronous READY# input
                           75     ;                       ; 1 = asynchronous READY# input
                           76     ;
                           77     ; CSREN0: Read Chip Select Enable bit (BUSCON0.14, only in some devices):
 0000                      78     _CSREN0 EQU 0 ; 0 = CS0# is independent of read command (RD#) /Dave/   
                           79     ;                       ; 1 = CS0# is generated for the duration of read
                           80     ;
                           81     ; CSWEN0: Write Chip Select Enable bit (BUSCON0.15, only in some devices):
 0000                      82     _CSWEN0 EQU 0 ; 0 = CS0# is independent of write command (WR#) /Dave/   
                           83     ;                       ; 1 = CS0# is generated for the duration of write
                           84     ;
                           85     ; XPERSHARE: XBUS Peripheral Share Mode Control (SYSCON.0)
 0000                      86     _XPERSHARE EQU 0 ; 0 = External accesses to XBUS peripherals disabled /Dave/   
                           87     ;                       ; 1 = XBUS accessible via external BUS in hold mode
                           88     ;
                           89     ; VISIBLE: Visible Mode Control (SYSCON.1)
 0000                      90     _VISIBLE EQU 0 ; 0 = Accesses to XBUS are done internally /Dave/   
                           91     ;                       ; 1 = XBUS accesses are made visible on external pins
                           92     ;
                           93     ; XPEN: XRAM & XBUS Peripheral Enable Control Bit (SYSCON.2)
 0001                      94     _XPEN EQU 1 ; 0 = access to on-chip XRAM & XBUS disable => EXT.BUS /Dave/   
                           95     ;                       ; 1 = on-chip XRAM & XBUS is accessed
                           96     ;
                           97     ; BDRSTEN: Bidirectional Reset Enable Bit (SYSCON.3, only in some devices)
 0000                      98     _BDRSTEN EQU 0 ; 0 = Pin RSTIN# is an input only /Dave/   
                           99     ;                       ; 1 = RSTIN# is pulled low during internal reset
                          100     ;
                          101     $SET (OWDDIS_ENABLE = 0); 0 = OWDDIS is set according to the inverted level
                          102     ;                       ;     at pin RD\ duirng reset.
                          103     ;                       ; 1 = the following _OWDDIS value is
                          104     ;                       ;     written to OWDDIS in the SYSCON register
                          105     ; OWDDIS: Oscillator Watchdog Disable Bit (SYSCON.4, only in some devices)
 0000                     106     _OWDDIS EQU     0       ; 0 = the on-chip oscillator watchdog is enabled 
                          107     ;                       ; 1 = the on-chip oscillator watchdog is disabled
                          108     ;
                          109     ; PWDCFG: Power Down Mode Configuration Bit (SYSCON.5, only in some devices)
 0000                     110     _PWDCFG EQU     0       ; 0 = Power Down mode can be left via reset
                          111     ;                       ; 1 = Power Down mode left via ext. or RTC interrupt
                          112     ;
                          113     ; CSCFG: Chip Select Configuration Control (SYSCON.6, only in some devices)
 0000                     114     _CSCFG EQU 0 ; 0 = Latched CS mode; CS signals are latch internally /Dave/   
                          115     ;                       ; 1 = Unlatched CS mode
                          116     ; 
                          117     $SET (WRCFG_ENABLE = 0) ; 0 = WRCFG is set according to the level at
                          118     ;                       ;     pin P0H.0 during reset.
                          119     ;                       ; 1 = the following _WRCFG value is
                          120     ;                       ;     written to WRCFG in the SYSCON register
                          121     ; WRCFG: Write Configuration Control Bit (SYSCON.7):
 0001                     122     _WRCFG EQU 1 ; 0 = Normal configuration of WR# and BHE# /Dave/   
                          123     ;                       ; 1 = WR# pin acts as WRL#, BHE# pin acts as WRH#
                          124     ;
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE     3

                          125     ; CLKEN: System Clock Output Enable bit (SYSCON.8):
 0000                     126     _CLKEN EQU 0 ; 0 = disabled    (Reset Value) /Dave/   
                          127     ;                       ; 1 = enabled
                          128     ;
                          129     ; BYTDIS: Byte High Enable pin control bit (SYSCON.9):
 0000                     130     _BYTDIS EQU 0 ; 0 = enabled     (Reset Value) /Dave/   
                          131     ;                       ; 1 = disabled
                          132     ;
                          133     $SET (ROMEN_ENABLE = 0) ; 0 = ROMEN is set according to the level at
                          134     ;                       ;     pin EA# during reset.
                          135     ;                       ; 1 = the following _ROMEN value is
                          136     ;                       ;     written to ROMEN in the SYSCON register
                          137     ; ROMEN: Internal ROM Access Enable control bit (SYSCON.10):
 0000                     138     _ROMEN EQU 0 ; 0 = Internal ROM disabled /Dave/   
                          139                             ; 1 = Internal ROM enabled
                          140     ;
                          141     ; SGTDIS: Segmentation Disable control bit (SYSCON.11):
                                  $IF TINY
                                  _SGTDIS EQU     1       ; disable segmented mode for TINY model
                          144     $ELSE
 0000                     145     _SGTDIS EQU     0       ; enable segmented mode (Reset Value)
                          146     $ENDIF
                          147     ;
                          148     ; ROMS1: ROM Segment Mapping Control Bit (SYSCON.12):
 0001                     149     _ROMS1 EQU 1 ; _ROMS1 = 0 Internal ROM mapped to segment 0 /Dave/   
                          150     ;                       ; _ROMS1 = 1 Internal ROM mapped to segment 1
                          151     ;
                          152     ; STKSZ: Maximum System Stack Size selection  (SYSCON.13 .. SYSCON.15)
                          153     ;  Defines the system stack space which is used by CALL/RET and PUSH/POP
                          154     ;  instructions.  The system stack space must be adjusted according the
                          155     ;  actual requirements of the application.
                          156     $SET (STK_SIZE = 0) ; /Dave/   
                          157     ;     System stack sizes:
                          158     ;       0 = 256 words (Reset Value)
                          159     ;       1 = 128 words
                          160     ;       2 =  64 words
                          161     ;       3 =  32 words
                          162     ;       4 = 512 words
                          163     ;       5 = not implemented
                          164     ;       6 = not implemented
                          165     ;       7 = no wrapping (entire internal RAM use as STACK, set size with SYSSZ)
                          166     ; If you have selected 7 for STK_SIZE, you can set the actual system stack size
                          167     ; with the following SSTSZ statement.
 0200                     168     SSTSZ   EQU     200H    ; set System Stack Size to 200H Bytes
                          169     ;
                          170     ; USTSZ: User Stack Size Definition 
                          171     ;  Defines the user stack space available for automatics.  This stack space is
                          172     ;  accessed by R0.  The user stack space must be adjusted according the actual
                          173     ;  requirements of the application.
 0200                     174     USTSZ   EQU     200H    ; set User Stack Size to 200H Bytes.
                          175     ;
                          176     ; WATCHDOG: Disable Hardware Watchdog
                          177     ; --- Set WATCHDOG = 1 to enable the Hardware watchdog
                          178     $SET (WATCHDOG = 0)
                          179     ;
                          180     ;
                          181     ; CLR_MEMORY: Disable Memory Zero Initialization of RAM area
                          182     ; --- Set CLR_MEMORY = 0 to disable memory zero initialization
                          183     $SET (CLR_MEMORY = 1)
                          184     ;
                          185     ; INIT_VARS: Disable Variable Initialization
                          186     ; --- Set INIT_VARS = 0 to disable variable initialization
                          187     $SET (INIT_VARS = 1)
                          188     ;
                          189     ; DPPUSE:  Re-assign DPP registers
                          190     ; --- Set DPPUSE = 0 to reduce the code size of the startup code, if you
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE     4

                          191     ;                    are not using the L166 DPPUSE directive.
                          192     $SET (DPPUSE = 1)
                          193     ;
                          194     ; DPP3USE: Use DPP3 register during variable initialization
                          195     ; --- Set DPP3USE = 0 to disable the usage of DPP3 during initialization of
                          196     ;                     variables.  This option might be required if you write
                          197     ;                     program parts that are reloaded during application 
                          198     ;                     execution and increase code size of the startup code.
                          199     $SET (DPP3USE = 1)
                          200     ;
                          201     ;------------------------------------------------------------------------------
                          202     ; Initialization for XPERCON register (available on some derivatives only)
                          203     ;
                          204     ; INIT_XPERCON: Init XPERCON register available on some devices
                          205     ; --- Set INIT_XPERCON = 1 to initialize the XPERCON register
                          206     $SET (INIT_XPERCON = 0) ; /Dave/   
                          207     ;
                          208     ; Note: The verious devices of 166/ST10 family provide different XPERCON
                          209     ;       registers.  Therefore you can set a fixed XPERCON value with the
                          210     ;       following EQU statment.  Please consult the Microcontroller 
                          211     ;       User's Guide for the exact definition of the XPERCON SFR in your
                          212     ;       166/ST10 derivative.
                          213     ;
                          214     ;            Bit  15   11    7    3
 0000                     215     V_XPERCON EQU 0 ; XPERCON values /Dave/   
                          216     ;
                          217     ; XPERCON Bits in various devices (Note: not all devices are listed)
                          218     ;   C165UTAH:  Bit 5: IOM-2, Bit 6: USB,  Bit 7:  EPEC
                          219     ;   C167CS:    Bit 0: CAN1,  Bit 1: CAN2, Bit 10: XRAM 2K  Bit 11: XRAM 6K
                          220     ;
                          221     ;------------------------------------------------------------------------------
                          222     ;
                          223     ; Initialization for SYSCON2 and SYSCON3 (available on some derivatives only)
                          224     ; Note: The SYSCON2 and SYSCON3 bits may be different in some derivatives.
                          225     ;       Check the values carefully!
                          226     ;
                          227     ; ADVANCED_SYSCON: Init SYSCON2 and SYSCON3 register available on some devices
                          228     ; --- Set ADVANCE_SYSCON = 1 to initialize SYSCON2 and SYSCON3
                          229     $SET (ADVANCED_SYSCON = 0) ; /Dave/   
                          230     ;
                          231     ; --- SYSCON2 values
                          232     ;
                          233     ; PDCON: Power Down Control (during power down mode) (SYSCON2.4 .. SYSCON2.5)
 0000                     234     PDCON   EQU     0       ; 0 = RTC On,  Ports On  (default after Reset)
                          235     ;                       ; 1 = RTC On,  Ports Off
                          236     ;                       ; 2 = RTC Off, Ports On
                          237     ;                       ; 3 = RTC Off, Ports Off
                          238     ;
                          239     ; RTS: RTC Clock Source (not affected by a reset) (SYSCON2.6)
 0000                     240     RTS     EQU     0       ; 0 = Main oscillator
                          241     ;                       ; 1 = Auxiliary oscillator (if available)
                          242     ;
                          243     ; SCS: SDD Clock Source (not affected by a reset) (SYSCON2.7)
 0000                     244     SCS     EQU     0       ; 0 = Main oscillator
                          245     ;                       ; 1 = Auxiliary oscillator (if available)
                          246     ;
                          247     ; CLKCON: Clock State Control (SYSCON2.8 .. SYSCON2.9)
 0000                     248     CLKCON  EQU     0       ; 0 = Running on configured basic frequency
                          249     ;                       ; 1 = Running on slow down frequency, PLL ON
                          250     ;                       ; 2 = Running on slow down frequency, PLL OFF
                          251     ;                       ; 3 = reserved
                          252     ;
                          253     ; CLKREL: Reload Counter Value for Slowdown Devider (SYSCON2.10 .. SYSCON2.14)
 0000                     254     CLKREL  EQU     0       ; possible values are 0 .. 31
                          255     ;
                          256     ;
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE     5

                          257     ; --- SYSCON3 values: disable on-chip peripherals
                          258     ;
 0000                     259     ADCDIS  EQU     0       ; 1 = disable Analog/Digital Converter    (SYSCON3.0)
 0000                     260     ASC0DIS EQU     0       ; 1 = disable UART ASC0                   (SYSCON3.1)
 0000                     261     SSCDIS  EQU     0       ; 1 = disable Synchronus Serial Cnl SSC   (SYSCON3.2)
 0000                     262     GPTDIS  EQU     0       ; 1 = disable Timer Block GPT             (SYSCON3.3)
                          263                             ; reserved                                (SYSCON3.4)
 0000                     264     FMDIS   EQU     0       ; 1 = disable on-chip Flash Memory Module (SYSCON3.5)
 0000                     265     CC1DIS  EQU     0       ; 1 = disable CAPCOM Unit 1               (SYSCON3.6)
 0000                     266     CC2DIS  EQU     0       ; 1 = disable CAPCOM Unit 2               (SYSCON3.7)
 0000                     267     CC6DIS  EQU     0       ; 1 = disable CAPCOM Unit 6               (SYSCON3.8)
 0000                     268     PWMDIS  EQU     0       ; 1 = disable Pulse Width Modulation Unit (SYSCON3.9)
 0000                     269     ASC1DIS EQU     0       ; 1 = disable UART ASC1                   (SYSCON3.10)
 0000                     270     I2CDIS  EQU     0       ; 1 = disable I2C Bus Module              (SYSCON3.11)
                          271     ;                       ; reserved                                (SYSCON3.12)
 0000                     272     CAN1DIS EQU     0       ; 1 = disable on-chip CAN Module 1        (SYSCON3.13)
 0000                     273     CAN2DIS EQU     0       ; 1 = disable on-chip CAN Module 2        (SYSCON3.14)
 0000                     274     PCDDIS  EQU     0       ; 1 = disable Peripheral Clock Driver     (SYSCON3.15)
                          275     ;
                          276     ;------------------------------------------------------------------------------
                          277     ; Initialization for RSTCON register (available on some derivatives only)
                          278     ;
                          279     ; INIT_RSTCON: Init RSTCON register available on some devices
                          280     ; --- Set INIT_RSTCON = 1 to initialize the RSTCON register
                          281     $SET (INIT_RSTCON = 0)
                          282     ;
                          283     ; --- RSTCON values
                          284     ;
                          285     ; R_RSTLEN: Reset Length Control (duration of next reset; RSTCON.0 .. RSTCON.1)
 0000                     286     R_RSTLEN   EQU     0       ; 0 = 1024 TCL:  standard duration
                          287     ;                          ; 1 = 2048 TCL:  extended duration
                          288     ;
                          289     ; R_SUE: Software Update enable (RSTCON.8)
 0000                     290     R_SUE      EQU     0       ; 0 = Configuration cannot be changed (default)
                          291     ;                          ; 1 = Software update of configuration is enabled
                          292     ;
                          293     ; R_CSSEL: Chip Select Lines (number of CS pins; RSTCON.9 .. RSTCON.10)
 0000                     294     R_CSSEL    EQU     0       ; 0 = 3 CS lines (CS2# .. CS0#) (default)
                          295     ;                          ; 1 = 2 CS lines (CS1# .. CS0#)
                          296     ;                          ; 2 = No CS lines at all
                          297     ;                          ; 3 = all CS lines (CSx# .. CS0#)                
                          298     ;
                          299     ; R_SALSEL: Segment Address Lines (number of address pins; RSTCON.11 .. RSTCON.12)
 0000                     300     R_SALSEL   EQU     0       ; 0 = 4-bit segment address: A19 .. A16 (default)
                          301     ;                          ; 1 = No segment address lines at all
                          302     ;                          ; 2 = full segment address:  Axx .. A16
                          303     ;                          ; 3 = 2-bit segment address: A17 .. A16
                          304     ;
                          305     ; R_CLKCFG: Clock Generation Mode (XTAL PLL factor; RSTCON.13 .. RSTCON.15)
 0000                     306     R_CLKCFG   EQU     0       ; 0 = CPU CLOCK = XTAL * 2.5
                          307     ;                          ; 1 = CPU CLOCK = XTAL / 2.0
                          308     ;                          ; 2 = CPU CLOCK = XTAL * 1.5
                          309     ;                          ; 3 = CPU CLOCK = XTAL (direct drive)
                          310     ;                          ; 4 = CPU CLOCK = XTAL * 5.0
                          311     ;                          ; 5 = CPU CLOCK = XTAL * 2.0
                          312     ;                          ; 6 = CPU CLOCK = XTAL * 3.0
                          313     ;                          ; 7 = CPU CLOCK = XTAL * 4.0
                          314     ;
                          315     ;------------------------------------------------------------------------------
                          316     ;
                          317     ; BUSCON1/ADDRSEL1 .. BUSCON4/ADDRSEL4 Initialization
                          318     ; ===================================================
                          319     ;
                          320     ;
                          321     ; BUSCON1/ADDRSEL1
                          322     ; --- Set BUSCON1 = 1 to initialize the BUSCON1/ADDRSEL1 registers
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE     6

                          323     $SET (BUSCON1 = 0) ; /Dave/   
                          324     ;
                          325     ; Define the start address and the address range of Chip Select 1 (CS1#) 
                          326     ; This values are used to set the ADDRSEL1 register
                          327      ; Set CS1# Start Address (default 100000H) /Dave/   
                          328      ; Set CS1# Range (default 1024K = 1MB) /Dave/   
                          329     ;  
                          330     ; MCTC1: Memory Cycle Time (BUSCON1.0 .. BUSCON1.3):
                          331     ; Note: if RDYEN1 == 1 a maximum number of 7 waitstates can be selected
 000F                     332     _MCTC1 EQU 15 ; Memory wait states is 1 (MCTC1 field = 0EH). /Dave/   
                          333     ;
                          334     ; RWDC1: Read/Write Signal Delay (BUSCON1.4):
 0000                     335     _RWDC1 EQU 0 ; 0 = Delay Time     0.5 States /Dave/   
                          336     ;                       ; 1 = No Delay Time  0   States
                          337     ;
                          338     ; MTTC1: Memory Tri-state Time (BUSCON1.5):
 0000                     339     _MTTC1 EQU 0 ; 0 = Delay Time     1   States /Dave/   
                          340     ;                       ; 1 = No Delay Time  0   States
                          341     ;
                          342     ; BTYP1: External Bus Configuration Control (BUSCON1.6 .. BUSCON1.7):
 0003                     343     _BTYP1 EQU 3 ; 0 = 8 Bit Non Multiplexed /Dave/   
                          344     ;                       ; 1 = 8 Bit Multiplexed
                          345     ;                       ; 2 = 16 Bit Non Multiplexed
                          346     ;                       ; 3 = 16 Bit Multiplexed
                          347     ;
                          348     ; ALECTL1: ALE Lengthening Control Bit (BUSCON1.9):
 0000                     349     _ALECTL1 EQU 0 ; see data sheet for description /Dave/   
                          350     ;
                          351     ; BUSACT1: Bus Active Control Bit (BUSCON1.10):
 0000                     352     _BUSACT1 EQU 0 ; = 0 external (ADDRSEL1) bus disabled /Dave/   
                          353                             ; = 1 external (ADDRSEL1) bus enabled
                          354     ;
                          355     ; RDYEN1: READY# Input Enable control bit (BUSCON1.12):
 0000                     356     _RDYEN1 EQU 0 ; 0 = READY# function disabled /Dave/   
                          357     ;                       ; 1 = READY# function enabled
                          358     ;
                          359     ; RDY_AS1: Synchronous / Asynchronous READY# Input (BUSCON1.3):
                          360     ; Note: This bit is only valid if _RDYEN1 == 1.
 0000                     361     _RDY_AS1 EQU    0       ; 0 = synchronous READY# input
                          362     ;                       ; 1 = asynchronous READY# input
                          363     ;
                          364     ; CSREN1: Read Chip Select Enable bit (BUSCON1.14):
 0000                     365     _CSREN1 EQU 0 ; 0 = CS1# is independent of read command (RD#) /Dave/   
                          366     ;                       ; 1 = CS1# is generated for the duration of read
                          367     ;
                          368     ; CSWEN1: Write Chip Select Enable bit (BUSCON1.15):
 0000                     369     _CSWEN1 EQU 0 ; 0 = CS1# is independent of write command (WR#) /Dave/   
                          370     ;                       ; 1 = CS1# is generated for the duration of write
                          371     ;
                          372     ;
                          373     ; BUSCON2/ADDRSEL2
                          374     ; --- Set BUSCON2 = 1 to initialize the BUSCON2/ADDRSEL2 registers
                          375     $SET (BUSCON2 = 0) ; /Dave/   
                          376     ;
                          377     ; Define the start address and the address range of Chip Select 2 (CS2#) 
                          378     ; This values are used to set the ADDRSEL2 register
                          379      ; Set CS2# Start Address (default 200000H) /Dave/   
                          380      ; Set CS2# Range (default 1024K = 1MB) /Dave/   
                          381     ;  
                          382     ; MCTC2: Memory Cycle Time (BUSCON2.0 .. BUSCON2.3):
                          383     ; Note: if RDYEN2 == 1 a maximum number of 7 waitstates can be selected
 000F                     384     _MCTC2 EQU 15 ; Memory wait states is 1 (MCTC2 field = 0EH). /Dave/   
                          385     ;
                          386     ; RWDC2: Read/Write Signal Delay (BUSCON2.4):
 0000                     387     _RWDC2 EQU 0 ; 0 = Delay Time     0.5 States /Dave/   
                          388     ;                       ; 1 = No Delay Time  0   States
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE     7

                          389     ;
                          390     ; MTTC2: Memory Tri-state Time (BUSCON2.5):
 0000                     391     _MTTC2 EQU 0 ; 0 = Delay Time     1   States /Dave/   
                          392     ;                       ; 1 = No Delay Time  0   States
                          393     ;
                          394     ; BTYP2: External Bus Configuration Control (BUSCON2.6 .. BUSCON2.7):
 0003                     395     _BTYP2 EQU 3 ; 0 = 8 Bit Non Multiplexed /Dave/   
                          396     ;                       ; 1 = 8 Bit Multiplexed
                          397     ;                       ; 2 = 16 Bit Non Multiplexed
                          398     ;                       ; 3 = 16 Bit Multiplexed
                          399     ;
                          400     ; ALECTL2: ALE Lengthening Control Bit (BUSCON2.9):
 0000                     401     _ALECTL2 EQU 0 ; see data sheet for description /Dave/   
                          402     ;
                          403     ; BUSACT2: Bus Active Control Bit (BUSCON2.10):
 0000                     404     _BUSACT2 EQU 0 ; = 0 external (ADDRSEL2) bus disabled /Dave/   
                          405                             ; = 1 external (ADDRSEL2) bus enabled
                          406     ;
                          407     ; RDYEN2: READY# Input Enable control bit (BUSCON2.12):
 0000                     408     _RDYEN2 EQU 0 ; 0 = READY# function disabled /Dave/   
                          409     ;                       ; 1 = READY# function enabled
                          410     ;
                          411     ; RDY_AS2: Synchronous / Asynchronous READY# Input (BUSCON2.3):
                          412     ; Note: This bit is only valid if _RDYEN2 == 1.
 0000                     413     _RDY_AS2 EQU    0       ; 0 = synchronous READY# input
                          414     ;                       ; 1 = asynchronous READY# input
                          415     ;
                          416     ; CSREN2: Read Chip Select Enable bit (BUSCON2.14):
 0000                     417     _CSREN2 EQU 0 ; 0 = CS2# is independent of read command (RD#) /Dave/   
                          418     ;                       ; 1 = CS2# is generated for the duration of read
                          419     ;
                          420     ; CSWEN2: Write Chip Select Enable bit (BUSCON2.15):
 0000                     421     _CSWEN2 EQU 0 ; 0 = CS2# is independent of write command (WR#) /Dave/   
                          422     ;                       ; 1 = CS2# is generated for the duration of write
                          423     ;
                          424     ;
                          425     ; BUSCON3/ADDRSEL3
                          426     ; --- Set BUSCON3 = 1 to initialize the BUSCON3/ADDRSEL3 registers
                          427     $SET (BUSCON3 = 0) ; /Dave/   
                          428     ;
                          429     ; Define the start address and the address range of Chip Select 3 (CS3#) 
                          430     ; This values are used to set the ADDRSEL3 register
                          431      ; Set CS3# Start Address (default 300000H) /Dave/   
                          432      ; Set CS3# Range (default 1024K = 1MB) /Dave/   
                          433     ;  
                          434     ; MCTC3: Memory Cycle Time (BUSCON3.0 .. BUSCON3.3):
                          435     ; Note: if RDYEN3 == 1 a maximum number of 7 waitstates can be selected
 000F                     436     _MCTC3 EQU 15 ; Memory wait states is 1 (MCTC3 field = 0EH). /Dave/   
                          437     ;
                          438     ; RWDC3: Read/Write Signal Delay (BUSCON3.4):
 0000                     439     _RWDC3 EQU 0 ; 0 = Delay Time     0.5 States /Dave/   
                          440     ;                       ; 1 = No Delay Time  0   States
                          441     ;
                          442     ; MTTC3: Memory Tri-state Time (BUSCON3.5):
 0000                     443     _MTTC3 EQU 0 ; 0 = Delay Time     1   States /Dave/   
                          444     ;                       ; 1 = No Delay Time  0   States
                          445     ;
                          446     ; BTYP3: External Bus Configuration Control (BUSCON3.6 .. BUSCON3.7):
 0003                     447     _BTYP3 EQU 3 ; 0 = 8 Bit Non Multiplexed /Dave/   
                          448     ;                       ; 1 = 8 Bit Multiplexed
                          449     ;                       ; 2 = 16 Bit Non Multiplexed
                          450     ;                       ; 3 = 16 Bit Multiplexed
                          451     ;
                          452     ; ALECTL3: ALE Lengthening Control Bit (BUSCON3.9):
 0000                     453     _ALECTL3 EQU 0 ; see data sheet for description /Dave/   
                          454     ;
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE     8

                          455     ; BUSACT3: Bus Active Control Bit (BUSCON3.10):
 0000                     456     _BUSACT3 EQU 0 ; = 0 external (ADDRSEL3) bus disabled /Dave/   
                          457                             ; = 1 external (ADDRSEL3) bus enabled
                          458     ;
                          459     ; RDYEN3: READY# Input Enable control bit (BUSCON3.12):
 0000                     460     _RDYEN3 EQU 0 ; 0 = READY# function disabled /Dave/   
                          461     ;                       ; 1 = READY# function enabled
                          462     ;
                          463     ; RDY_AS3: Synchronous / Asynchronous READY# Input (BUSCON3.3):
                          464     ; Note: This bit is only valid if _RDYEN3 == 1.
 0000                     465     _RDY_AS3 EQU    0       ; 0 = synchronous READY# input
                          466     ;                       ; 1 = asynchronous READY# input
                          467     ;
                          468     ; CSREN3: Read Chip Select Enable bit (BUSCON3.14):
 0000                     469     _CSREN3 EQU 0 ; 0 = CS3# is independent of read command (RD#) /Dave/   
                          470     ;                       ; 1 = CS3# is generated for the duration of read
                          471     ;
                          472     ; CSWEN3: Write Chip Select Enable bit (BUSCON3.15):
 0000                     473     _CSWEN3 EQU 0 ; 0 = CS3# is independent of write command (WR#) /Dave/   
                          474     ;                       ; 1 = CS3# is generated for the duration of write
                          475     ;
                          476     ;
                          477     ; BUSCON4/ADDRSEL4
                          478     ; --- Set BUSCON4 = 1 to initialize the BUSCON4/ADDRSEL4 registers
                          479     $SET (BUSCON4 = 0) ; /Dave/   
                          480     ;
                          481     ; Define the start address and the address range of Chip Select 4 (CS4#) 
                          482     ; This values are used to set the ADDRSEL4 register
                          483      ; Set CS4# Start Address (default 400000H) /Dave/   
                          484      ; Set CS4# Range (default 1024K = 1MB) /Dave/   
                          485     ;  
                          486     ; MCTC4: Memory Cycle Time (BUSCON4.0 .. BUSCON4.3):
                          487     ; Note: if RDYEN4 == 1 a maximum number of 7 waitstates can be selected
 000F                     488     _MCTC4 EQU 15 ; Memory wait states is 1 (MCTC4 field = 0EH). /Dave/   
                          489     ;
                          490     ; RWDC4: Read/Write Signal Delay (BUSCON4.4):
 0000                     491     _RWDC4 EQU 0 ; 0 = Delay Time     0.5 States /Dave/   
                          492     ;                       ; 1 = No Delay Time  0   States
                          493     ;
                          494     ; MTTC4: Memory Tri-state Time (BUSCON4.5):
 0000                     495     _MTTC4 EQU 0 ; 0 = Delay Time     1   States /Dave/   
                          496     ;                       ; 1 = No Delay Time  0   States
                          497     ;
                          498     ; BTYP4: External Bus Configuration Control (BUSCON4.6 .. BUSCON4.7):
 0003                     499     _BTYP4 EQU 3 ; 0 = 8 Bit Non Multiplexed /Dave/   
                          500     ;                       ; 1 = 8 Bit Multiplexed
                          501     ;                       ; 2 = 16 Bit Non Multiplexed
                          502     ;                       ; 3 = 16 Bit Multiplexed
                          503     ;
                          504     ; ALECTL4: ALE Lengthening Control Bit (BUSCON4.9):
 0000                     505     _ALECTL4 EQU 0 ; see data sheet for description /Dave/   
                          506     ;
                          507     ; BUSACT4: Bus Active Control Bit (BUSCON4.10):
 0000                     508     _BUSACT4 EQU 0 ; = 0 external (ADDRSEL4) bus disabled /Dave/   
                          509                             ; = 1 external (ADDRSEL4) bus enabled
                          510     ;
                          511     ; RDYEN4: READY# Input Enable control bit (BUSCON4.12):
 0000                     512     _RDYEN4 EQU 0 ; 0 = READY# function disabled /Dave/   
                          513     ;                       ; 1 = READY# function enabled
                          514     ;
                          515     ; RDY_AS4: Synchronous / Asynchronous READY# Input (BUSCON4.3):
                          516     ; Note: This bit is only valid if _RDYEN4 == 1.
 0000                     517     _RDY_AS4 EQU    0       ; 0 = synchronous READY# input
                          518     ;                       ; 1 = asynchronous READY# input
                          519     ;
                          520     ; CSREN4: Read Chip Select Enable bit (BUSCON4.14):
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE     9

 0000                     521     _CSREN4 EQU 0 ; 0 = CS4# is independent of read command (RD#) /Dave/   
                          522     ;                       ; 1 = CS4# is generated for the duration of read
                          523     ;
                          524     ; CSWEN4: Write Chip Select Enable bit (BUSCON4.15):
 0000                     525     _CSWEN4 EQU 0 ; 0 = CS4# is independent of write command (WR#) /Dave/   
                          526     ;                       ; 1 = CS4# is generated for the duration of write
                          527     ;
                          528     ;------------------------------------------------------------------------------
                          529     
                                  $IF TINY
                                  $SET (DPPUSE = 0)
                          532     $ENDIF
                          533     
 0000                     534     _STKSZ SET 0 ; /Dave/   
 0000                     535     _STKSZ1         SET     0               ; size is 512 Words
                          536     $IF (STK_SIZE = 0)
 0001                     537     _STKSZ1         SET     1               ; size is 256 Words
                          538     $ENDIF
                                  $IF (STK_SIZE = 1)
                                  _STKSZ          SET     1
                                  _STKSZ1         SET     2               ; size is 128 Words
                          542     $ENDIF
                                  $IF (STK_SIZE = 2)
                                  _STKSZ          SET     2
                                  _STKSZ1         SET     3               ; size is  64 Words
                          546     $ENDIF
                                  $IF (STK_SIZE = 3)
                                  _STKSZ          SET     3
                                  _STKSZ1         SET     4               ; size is  32 Words
                          550     $ENDIF
                                  $IF (STK_SIZE = 4)
                                  _STKSZ          SET     4
                          553     $ENDIF
                                  $IF (STK_SIZE = 5)
                                  _STKSZ          SET     5
                          556     $ENDIF
                                  $IF (STK_SIZE = 6)
                                  _STKSZ          SET     6
                          559     $ENDIF
                                  $IF (STK_SIZE = 7)
                                  _STKSZ          SET     7
                          562     $ENDIF
                          563     
                          564     
                          565     $IF NOT TINY
                          566     ASSUME  DPP3:SYSTEM
                          567     ASSUME  DPP2:NDATA
                          568     $ENDIF
                          569     
                          570     NAME    ?C_STARTUP
                          571     PUBLIC  ?C_STARTUP
                          572     
                                  $IF MEDIUM OR LARGE OR HLARGE OR XLARGE
                                  Model   LIT     'FAR'
                          575     $ELSE
                          576     Model   LIT     'NEAR'
                          577     $ENDIF
                          578     
                          579     EXTRN   main:NEAR
                          580     
                          581     PUBLIC          ?C_USRSTKBOT
                          582     
--------                  583     ?C_USERSTACK    SECTION DATA PUBLIC 'NDATA'
                          584     $IF NOT TINY
                          585     NDATA           DGROUP  ?C_USERSTACK
                          586     $ENDIF
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE    10

                          587     ?C_USRSTKBOT:
00000000                  588                     DS      USTSZ           ; Size of User Stack
                          589     ?C_USERSTKTOP:
--------                  590     ?C_USERSTACK    ENDS
                          591     
                          592     ?C_MAINREGISTERS        REGDEF  R0 - R15
                          593     
                                  $IF (STK_SIZE = 7)
                                  
                                  ?C_SYSSTACK     SECTION DATA PUBLIC 'IDATA'
                                  $IF NOT TINY
                                  SDATA           DGROUP  ?C_SYSSTACK
                                  $ENDIF
                                  _BOS:                                   ; bottom of system stack
                                                  DS      SSTSZ           ; Size of User Stack
                                  _TOS:                                   ; top of system stack
                                  ?C_SYSSTACK     ENDS
                                  
                          605     $ELSE
                          606     ; Setup Stack Overflow
 FC00                     607     _TOS    EQU     0FC00H                          ; top of system stack
 FA00                     608     _BOS    EQU     _TOS - (1024 >> _STKSZ1)        ; bottom of system stack
                          609     $ENDIF
                          610     
                          611     PUBLIC          ?C_SYSSTKBOT
                          612     PUBLIC          ?C_SYSSTKTOP
                          613     
 FA00                     614     ?C_SYSSTKBOT    EQU     _BOS
 FC00                     615     ?C_SYSSTKTOP    EQU     _TOS
                          616     
                          617                     SSKDEF  _STKSZ          ; System stack size
                          618     
--------                  619     ?C_STARTUP_CODE SECTION CODE    'ICODE'
                          620     
                          621     
                          622     ;------------------------------------------------------------------------------
                          623     
                          624     ; Special Function Register Addresses
 FF12                     625     SYSCON   DEFR   0FF12H
 FF0C                     626     BUSCON0  DEFR   0FF0CH
 FE12                     627     SP       DEFR   0FE12H
 FE14                     628     STKOV    DEFR   0FE14H
 FE16                     629     STKUN    DEFR   0FE16H
 FFC4                     630     P3       DEFR   0FFC4H
 FFC6                     631     DP3      DEFR   0FFC6H
 FF14                     632     BUSCON1  DEFR   0FF14H
 FF16                     633     BUSCON2  DEFR   0FF16H
 FF18                     634     BUSCON3  DEFR   0FF18H
 FF1A                     635     BUSCON4  DEFR   0FF1AH
 FE18                     636     ADDRSEL1 DEFR   0FE18H
 FE1A                     637     ADDRSEL2 DEFR   0FE1AH
 FE1C                     638     ADDRSEL3 DEFR   0FE1CH
 FE1E                     639     ADDRSEL4 DEFR   0FE1EH
 F1D0                     640     SYSCON2  DEFR   0F1D0H
 F1D4                     641     SYSCON3  DEFR   0F1D4H
                          642     
                          643     
                          644     
                          645     
                          646     
                          647     
                          648     
                          649     
                          650     
                          651     
                          652     
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE    11

                          653     
                          654     
                          655     
                          656     
                          657     
                          658     
                          659     
                          660     
                          661     
                          662     
                          663     
                          664     ?C_RESET        PROC TASK C_STARTUP INTNO RESET = 0
                          665     ?C_STARTUP:     LABEL   NEAR
                          666     
                          667     
                          668     $IF (WATCHDOG = 0)
00000000 A55AA5A5         669                     DISWDT                  ; Disable watchdog timer
                          670     $ENDIF
                          671     
                                  $IF (INIT_XPERCON = 1)
                                  ; Improtant XPERCON must be set before SYSCON.XPEN is enabled
                                  XPERCON  DEFR 0F024H
                                                  EXTR    #1
                                                  MOV     XPERCON,#V_XPERCON
                          677     $ENDIF
                          678     
 0000                     679     BCON0L          SET     (_MTTC0 << 5) OR (_RWDC0 << 4)
 0000                     680     BCON0L          SET     BCON0L OR ((NOT _MCTC0) AND 0FH)
 0000                     681     BCON0L          SET     BCON0L AND (NOT (_RDYEN0 << 3))
 0000                     682     BCON0L          SET     BCON0L OR (_RDY_AS0 << 3)
 0002                     683     BCON0H          SET     (_ALECTL0 << 1) OR (_RDYEN0 << 4)
 0002                     684     BCON0H          SET     BCON0H OR (_CSREN0 << 6) OR (_CSWEN0 << 7)
                                  $IF (BTYP_ENABLE == 1)
                                  BCON0L          SET     BCON0L OR (_BTYP0 << 6)
                                  BCON0H          SET     BCON0H OR (_BUSACT0 << 2)
                          688     $ENDIF
                          689     
                          690     $IF (BTYP_ENABLE == 0)
00000004 0A863F00         691                     BFLDL   BUSCON0,#03FH,#BCON0L
00000008 1A8602D2         692                     BFLDH   BUSCON0,#0D2H,#BCON0H
                                  $ELSE
                                                  BFLDL   BUSCON0,#0FFH,#BCON0L
                                                  BFLDH   BUSCON0,#0D6H,#BCON0H
                          696     $ENDIF
 FB6F                     697     SYS_BITS        SET     0FB6FH
                          698     
 0010                     699     SYS_H           SET     (_STKSZ << 5) OR (_ROMS1 << 4) OR (_SGTDIS << 3)
 0010                     700     SYS_H           SET     SYS_H OR (_BYTDIS << 1) OR _CLKEN
 0004                     701     SYS_L           SET     _XPERSHARE OR (_VISIBLE << 1) OR (_XPEN << 2)
 0004                     702     SYS_L           SET     SYS_L OR (_BDRSTEN << 3)
 0004                     703     SYS_L           SET     SYS_L OR (_PWDCFG << 5) OR (_CSCFG << 6)
                                  $IF (WRCFG_ENABLE == 1)
                                  SYS_L           SET     SYS_L OR (_WRCFG << 7)
                                  SYS_BITS        SET     SYS_BITS OR 00080H
                          707     $ENDIF
                                  $IF (OWDDIS_ENABLE == 1)
                                  SYS_L           SET     SYS_L OR (_OWDDIS << 4)
                                  SYS_BITS        SET     SYS_BITS OR 00010H
                          711     $ENDIF
                                  $IF (ROMEN_ENABLE == 1)
                                  SYS_H           SET     SYS_H OR (_ROMEN << 2)
                                  SYS_BITS        SET     SYS_BITS OR 00400H
                          715     $ENDIF
                          716     ; Setup SYSCON Register
                          717     
0000000C 1A8910FB         718                     BFLDH   SYSCON,#HIGH SYS_BITS,#SYS_H
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE    12

00000010 0A896F04         719                     BFLDL   SYSCON,#LOW  SYS_BITS,#SYS_L
                          720     
                          721     ; Setup RSTCON Register
                                  $IF (INIT_RSTCON = 1)
                                  RSTCON          EQU     0F1E0H
                                  V_RSTCON        SET     R_RSTLEN OR (R_SUE << 8) OR (R_CSSEL << 9)
                                  V_RSTCON        SET     V_RSTCON OR (R_SALSEL << 11) OR (R_CLKCFG << 13)
                                  
                                                  MOV     R1,#V_RSTCON   ; RSTCON value
                                                  MOVW    DPP3:RSTCON,R1
                                                  EXTR    #2
                                                  MOV     SYSCON2,#0500H ; SDD mode, PLL on, factor 2
                                                  MOV     SYSCON2,#0400H ; Switch to basic clock mode
                          732     $ENDIF
                          733     
                          734     ;
                                  $IF (ADVANCED_SYSCON = 1)
                                  SYS_2           SET     (PDCON << 4) OR (RTS << 6) OR (SCS << 7)
                                  SYS_2           SET     SYS_2 OR (CLKCON << 8) OR (CLKREL << 10)
                                  
                                  SYS_3           SET     ADCDIS OR (ASC0DIS << 1) OR (SSCDIS << 2)
                                  SYS_3           SET     SYS_3 OR (GPTDIS << 3)
                                  SYS_3           SET     SYS_3 OR (FMDIS << 5) OR (CC1DIS << 6) OR (CC2DIS << 7)
                                  SYS_3           SET     SYS_3 OR (CC6DIS << 8) OR (PWMDIS << 9)
                                  SYS_3           SET     SYS_3 OR (ASC1DIS << 10) OR (I2CDIS << 11)
                                  SYS_3           SET     SYS_3 OR (CAN1DIS << 13) OR (CAN2DIS << 14)
                                  SYS_3           SET     SYS_3 OR (PCDDIS << 15)
                                  
                                                  EXTR    #2
                                                  MOV     SYSCON2,#SYS_2
                                                  MOV     SYSCON3,#SYS_3
                          750     $ENDIF
                          751     ;
                          752     
                                  $IF (BUSCON1 = 1)
                                  BCON1           SET     (_MTTC1 << 5) OR (_RWDC1 << 4)
                                  BCON1           SET     BCON1 OR ((NOT _MCTC1) AND 0FH)
                                  BCON1           SET     BCON1 AND (NOT (_RDYEN1 << 3))
                                  BCON1           SET     BCON1 OR (_RDY_AS1 << 3)  OR (_BTYP1 << 6)
                                  BCON1           SET     BCON1 OR (_ALECTL1 << 9) OR (_BUSACT1 << 10)
                                  BCON1           SET     BCON1 OR (_RDYEN1 << 12) OR (_CSREN1 << 14)
                                  BCON1           SET     BCON1 OR (_CSWEN1 << 15)
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  ADDR1    EQU     00H
                                  
                                                  MOV     ADDRSEL1,#ADDR1 
                                                  MOV     BUSCON1,#BCON1
                          784     $ENDIF
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE    13

                          785     
                                  $IF (BUSCON2 = 1)
                                  BCON2           SET     (_MTTC2 << 5) OR (_RWDC2 << 4)
                                  BCON2           SET     BCON2 OR ((NOT _MCTC2) AND 0FH)
                                  BCON2           SET     BCON2 AND (NOT (_RDYEN2 << 3))
                                  BCON2           SET     BCON2 OR (_RDY_AS2 << 3)  OR (_BTYP2 << 6)
                                  BCON2           SET     BCON2 OR (_ALECTL2 << 9) OR (_BUSACT2 << 10)
                                  BCON2           SET     BCON2 OR (_RDYEN2 << 12) OR (_CSREN2 << 14)
                                  BCON2           SET     BCON2 OR (_CSWEN2 << 15)
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  ADDR2    EQU     00H
                                  
                                                  MOV     ADDRSEL2,#ADDR2 
                                                  MOV     BUSCON2,#BCON2
                          817     $ENDIF
                          818     
                                  $IF (BUSCON3 = 1)
                                  BCON3           SET     (_MTTC3 << 5) OR (_RWDC3 << 4)
                                  BCON3           SET     BCON3 OR ((NOT _MCTC3) AND 0FH)
                                  BCON3           SET     BCON3 AND (NOT (_RDYEN3 << 3))
                                  BCON3           SET     BCON3 OR (_RDY_AS3 << 3)  OR (_BTYP3 << 6)
                                  BCON3           SET     BCON3 OR (_ALECTL3 << 9) OR (_BUSACT3 << 10)
                                  BCON3           SET     BCON3 OR (_RDYEN3 << 12) OR (_CSREN3 << 14)
                                  BCON3           SET     BCON3 OR (_CSWEN3 << 15)
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  ADDR3    EQU     00H
                                  
                                                  MOV     ADDRSEL3,#ADDR3 
                                                  MOV     BUSCON3,#BCON3
                          850     $ENDIF
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE    14

                          851     
                                  $IF (BUSCON4 = 1)
                                  BCON4           SET     (_MTTC4 << 5) OR (_RWDC4 << 4)
                                  BCON4           SET     BCON4 OR ((NOT _MCTC4) AND 0FH)
                                  BCON4           SET     BCON4 AND (NOT (_RDYEN4 << 3))
                                  BCON4           SET     BCON4 OR (_RDY_AS4 << 3)  OR (_BTYP4 << 6)
                                  BCON4           SET     BCON4 OR (_ALECTL4 << 9) OR (_BUSACT4 << 10)
                                  BCON4           SET     BCON4 OR (_RDYEN4 << 12) OR (_CSREN4 << 14)
                                  BCON4           SET     BCON4 OR (_CSWEN4 << 15)
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  
                                  ADDR4    EQU     00H
                                  
                                                  MOV     ADDRSEL4,#ADDR4 
                                                  MOV     BUSCON4,#BCON4
                          883     $ENDIF
                          884     
                          885     
                          886     
                                  $IF (STK_SIZE = 7)
                                                  MOV     STKUN,#0FFFEH           ; AVOID STKUN TRAP
                                                  MOV     STKOV,#0H               ; AVOID STKOV TRAP
                                                  MOV     SP,#DPP3:_TOS           ; INITIALIZE STACK POINTER
                                                  MOV     STKUN,#DPP3:_TOS        ; INITIALIZE STACK UNFL REGISTER
                                                  MOV     STKOV,#DPP3:(_BOS+6*2)  ; INITIALIZE STACK OVFL REGISTER
                          893     $ELSE
00000014 E60A0CFA         894                     MOV     STKOV,#(_BOS+6*2)       ; INITIALIZE STACK OVFL REGISTER
                          895     $ENDIF
                          896     
                          897     $IF NOT TINY
                          898     
                          899                     EXTRN   ?C_PAGEDPP0 : DATA16
                          900                     EXTRN   ?C_PAGEDPP1 : DATA16
                          901                     EXTRN   ?C_PAGEDPP2 : DATA16
                          902     
                          903     $IF (DPPUSE = 1)
00000018 E600???? E       904                     MOV     DPP0,#?C_PAGEDPP0       ; INIT DPP0 VALUE
                          905     $ENDIF
0000001C E601???? E       906                     MOV     DPP1,#?C_PAGEDPP1       ; DEFAULT NEAR CONST PAGE
00000020 E602???? E       907                     MOV     DPP2,#?C_PAGEDPP2       ; DEFAULT NEAR DATA  PAGE
                          908     
                          909     $ENDIF
                          910     
00000024 E608???? R       911                     MOV     CP,#?C_MAINREGISTERS
00000028 B54AB5B5         912                     EINIT
                          913     
                          914     ;$IF NOT TINY
                          915     ;               MOV     R0,#DPP2:?C_USERSTKTOP
                          916     ;$ELSE
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE    15

0000002C E6F0???? R       917                     MOV     R0,#?C_USERSTKTOP
                          918     ;$ENDIF
                          919     
                          920     
                          921     ;------------------------------------------------------------------------------
                          922     ;
                          923     ; The following code is necessary to set RAM variables to 0 at start-up
                          924     ; (RESET) of the C application program.
                          925     ;
                          926     
                          927     $IF (CLR_MEMORY = 1)
                          928     
                          929                     EXTRN   ?C_CLRMEMSECSTART : WORD
                          930     Clr_Memory:
                                  $IF TINY
                                                  MOV     R8,#?C_CLRMEMSECSTART
                                                  JMPR    cc_Z,EndClear
                                  
                                  RepeatClear:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  MOV     R5,#0
                                                  MOV     R2,[R8+]    ; Count
                                                  JMPR    cc_Z,EndClear
                                                  MOV     R3,R2
                                                  MOV     R4,[R8+]
                                                  JBC     R2.14,ClearNear
                                  
                                  ClearBit:       MOV     R3,R4
                                                  SHR     R3,#3
                                                  BCLR    R3.0
                                                  ADD     R3,#0FD00H              ; START OF BIT SPACE
                                                  MOV     R5,#1
                                                  SHL     R5,R4
                                                  CPL     R5
                                                  AND     R5,[R3]
                                                  MOV     [R3],R5
                                                  ADD     R4,#1
                                                  SUB     R2,#1
                                                  JMPR    cc_NZ,ClearBit
                                                  JMPR    cc_UC,RepeatClear
                                  
                                  ClearNear:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  MOVB    [R4],RL5
                                                  ADD     R4,#1
                                                  SUB     R2,#1
                                                  JMPR    cc_NN,ClearNear
                                                  JMPR    cc_UC,RepeatClear
                                  
                          970     $ELSE
00000030 E6F9???? E       971                     MOV     R9,#SEG (?C_CLRMEMSECSTART)
00000034 E6F8???? E       972                     MOV     R8,#SOF (?C_CLRMEMSECSTART)
00000038 F018             973                     MOV     R1,R8           
0000003A 7019             974                     OR      R1,R9
0000003C 2D29             975                     JMPR    cc_Z,EndClear
                          976     
                          977     RepeatClear:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                          980     $ENDIF
0000003E E005             981                     MOV     R5,#0
00000040 DC09             982                     EXTS    R9,#1
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE    16

00000042 9828             983                     MOV     R2,[R8+]    ; Count
00000044 2D25             984                     JMPR    cc_Z,EndClear
00000046 F032             985                     MOV     R3,R2
00000048 DC09             986                     EXTS    R9,#1
0000004A 9848             987                     MOV     R4,[R8+]
0000004C AAF21BE0         988                     JBC     R2.14,ClearNear
00000050 AAF20EF0         989                     JBC     R2.15,ClearFar
                          990     
00000054 F034             991     ClearBit:       MOV     R3,R4
00000056 7C33             992                     SHR     R3,#3
00000058 0EF3             993                     BCLR    R3.0
0000005A 06F300FD         994                     ADD     R3,#0FD00H              ; START OF BIT SPACE
0000005E E015             995                     MOV     R5,#1
00000060 4C54             996                     SHL     R5,R4
00000062 9150             997                     CPL     R5
00000064 685B             998                     AND     R5,[R3]
00000066 B853             999                     MOV     [R3],R5
00000068 0841            1000                     ADD     R4,#1
0000006A 2821            1001                     SUB     R2,#1
0000006C 3DF3            1002                     JMPR    cc_NZ,ClearBit
0000006E 0DE7            1003                     JMPR    cc_UC,RepeatClear
                         1004     
00000070 DC09            1005     ClearFar:       EXTS    R9,#1
00000072 9838            1006                     MOV     R3,[R8+]
                         1007     RepClearFar:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                         1010     $ENDIF
00000074 DC44            1011                     EXTP    R4,#1
00000076 B9A3            1012                     MOVB    [R3],RL5
00000078 0831            1013                     ADD     R3,#1
0000007A 1840            1014                     ADDC    R4,#0
0000007C 76F300C0        1015                     OR      R3,#0C000H
00000080 2821            1016                     SUB     R2,#1
00000082 7DF8            1017                     JMPR    cc_NN,RepClearFar
00000084 0DDC            1018                     JMPR    cc_UC,RepeatClear
                         1019     
                         1020     ClearNear:
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                         1023     $ENDIF
00000086 B9A4            1024                     MOVB    [R4],RL5
00000088 0841            1025                     ADD     R4,#1
0000008A 2821            1026                     SUB     R2,#1
0000008C 7DFC            1027                     JMPR    cc_NN,ClearNear
0000008E 0DD7            1028                     JMPR    cc_UC,RepeatClear
                         1029     $ENDIF
                         1030     
                         1031     EndClear:
                         1032     
                         1033     $ENDIF
                         1034     
                         1035     ;------------------------------------------------------------------------------
                         1036     ;
                         1037     ;  The following code is necessary, if the application program contains
                         1038     ;  initialized variables at file level.
                         1039     ;
                         1040     
                         1041     $IF (INIT_VARS = 1) ; *********************************************************
                         1042     
                         1043                     EXTRN   ?C_INITSECSTART : WORD
                         1044     Init_Vars:
                                  $IF TINY ; ********************************************************************
                                                  MOV     R8,#?C_INITSECSTART
                                  RepeatInit:     
                                  $IF (WATCHDOG = 1)
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE    17

                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  MOV     R2,[R8+]
                                                  JMPR    cc_Z,EndInit
                                                  JBC     R2.15,InitBit
                                                  MOV     R4,R2
                                                  AND     R2,#3FFFH
                                                  JMPR    cc_NZ,LenLoad
                                                  MOV     R4,#0
                                                  MOV     R2,[R8+]
                                  LenLoad:        MOV     R3,[R8+]
                                  CopyInitVal:    MOVB    [R3],[R8+]
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  ADD     R3,#1
                                                  SUB     R2,#1
                                                  JMPR    cc_NZ,CopyInitVal
                                                  JNB     R8.0,RepeatInit
                                                  ADD     R8,#1
                                                  ADDC    R9,#0                   ; potential overflow
                                                  JMPR    cc_UC,RepeatInit
                                  
                                  InitBit:        MOVBZ   R3,RL2
                                                  SHL     R3,#1
                                                  OR      R3,#0FD00H              ; START OF BIT SPACE
                                                  MOV     R4,#1
                                                  MOVB    RL5,RH2
                                                  SHL     R4,R5                   ; CALCULATE BIT MASK
                                                  JB      R2.7,SetBit
                                                  CPL     R4                      ; CLEAR BIT
                                                  AND     R4,[R3]
                                                  JMPR    cc_UC,StoreBit
                                  SetBit:         OR      R4,[R3]                 ; SET BIT
                                  StoreBit:       MOV     [R3],R4
                                                  JMPR    cc_UC,RepeatInit
                                  
                                  EndInit:
                                  
                         1088     $ELSE ; $IF TINY **************************************************************
00000090 E6F9???? E      1089                     MOV     R9,#SEG (?C_INITSECSTART)
00000094 E6F8???? E      1090                     MOV     R8,#SOF (?C_INITSECSTART)
                         1091     $IF (DPP3USE = 1) ; ***********************************************************
                         1092     RepeatInit:     
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                         1095     $ENDIF
00000098 E6030300        1096                     MOV     DPP3,#3
0000009C DC09            1097                     EXTS    R9,#1
0000009E A828            1098                     MOV     R2,[R8]
000000A0 2D3D            1099                     JMPR    cc_Z,EndInit
000000A2 0882            1100                     ADD     R8,#2
000000A4 1890            1101                     ADDC    R9,#0
000000A6 AAF22AF0        1102                     JBC     R2.15,InitBit
000000AA F042            1103                     MOV     R4,R2
000000AC 66F2FF3F        1104                     AND     R2,#3FFFH
000000B0 3D05            1105                     JMPR    cc_NZ,LenLoad
000000B2 E004            1106                     MOV     R4,#0
000000B4 DC09            1107                     EXTS    R9,#1
000000B6 A828            1108                     MOV     R2,[R8]
000000B8 0882            1109                     ADD     R8,#2
000000BA 1890            1110                     ADDC    R9,#0
000000BC DC09            1111     LenLoad:        EXTS    R9,#1
000000BE A838            1112                     MOV     R3,[R8]
000000C0 0882            1113                     ADD     R8,#2
000000C2 1890            1114                     ADDC    R9,#0
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE    18

000000C4 8AF406E0        1115                     JB      R4.14,CopyInitVal
000000C8 F6F306FE        1116                     MOV     DPP3,R3
000000CC DC09            1117                     EXTS    R9,#1
000000CE A838            1118                     MOV     R3,[R8]
000000D0 0882            1119                     ADD     R8,#2
000000D2 1890            1120                     ADDC    R9,#0
000000D4 DC09            1121     CopyInitVal:    EXTS    R9,#1
000000D6 A9A8            1122                     MOVB    RL5,[R8]
000000D8 0881            1123                     ADD     R8,#1
000000DA 1890            1124                     ADDC    R9,#0
000000DC B9A3            1125                     MOVB    [R3],RL5
000000DE 0831            1126                     ADD     R3,#1
000000E0 8AF406E0        1127                     JB      R4.14,NoDPP3Adj
000000E4 8AF304E0        1128                     JB      R3.14,NoDPP3Adj
000000E8 06030100        1129                     ADD     DPP3,#1
000000EC 76F300C0        1130                     OR      R3,#0C000H              ; SET DPP3 Bits 
                         1131     NoDPP3Adj:      
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                         1134     $ENDIF
000000F0 2821            1135                     SUB     R2,#1
000000F2 3DF0            1136                     JMPR    cc_NZ,CopyInitVal
000000F4 9AF8D000        1137                     JNB     R8.0,RepeatInit
000000F8 0881            1138                     ADD     R8,#1
000000FA 1890            1139                     ADDC    R9,#0                   ; potential overflow
000000FC 0DCD            1140                     JMPR    cc_UC,RepeatInit
                         1141     
000000FE C043            1142     InitBit:        MOVBZ   R3,RL2
00000100 5C13            1143                     SHL     R3,#1
00000102 76F300FD        1144                     OR      R3,#0FD00H              ; START OF BIT SPACE
00000106 E014            1145                     MOV     R4,#1
00000108 F1A5            1146                     MOVB    RL5,RH2
0000010A 4C45            1147                     SHL     R4,R5                   ; CALCULATE BIT MASK
0000010C 8AF20370        1148                     JB      R2.7,SetBit
00000110 9140            1149                     CPL     R4                      ; CLEAR BIT
00000112 684B            1150                     AND     R4,[R3]
00000114 0D01            1151                     JMPR    cc_UC,StoreBit
00000116 784B            1152     SetBit:         OR      R4,[R3]                 ; SET BIT
00000118 B843            1153     StoreBit:       MOV     [R3],R4
0000011A 0DBE            1154                     JMPR    cc_UC,RepeatInit
                         1155     
                                  $ELSE ; block IF (DPP3USE = 1) ************************************************
                                  RepeatInit:       
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  EXTS    R9,#1
                                                  MOV     R2,[R8]
                                                  JMPR    cc_Z,EndInit
                                                  ADD     R8,#2
                                                  ADDC    R9,#0
                                                  JBC     R2.15,InitBit
                                                  MOV     R4,R2
                                                  AND     R2,#3FFFH
                                                  JMPR    cc_NZ,LenLoad
                                                  MOV     R4,#0
                                                  EXTS    R9,#1
                                                  MOV     R2,[R8]
                                                  ADD     R8,#2
                                                  ADDC    R9,#0
                                  LenLoad:        EXTS    R9,#1
                                                  MOV     R3,[R8]
                                                  ADD     R8,#2
                                                  ADDC    R9,#0
                                                  JB      R4.14,CopyNearVal
                                                  MOV     R6,R3
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE    19

                                                  EXTS    R9,#1
                                                  MOV     R3,[R8]
                                                  ADD     R8,#2
                                                  ADDC    R9,#0
                                  CopyInitVal:    EXTS    R9,#1
                                                  MOVB    RL5,[R8]
                                                  ADD     R8,#1
                                                  ADDC    R9,#0
                                                  EXTP    R6,#1
                                                  MOV     [R3],RL5
                                                  ADD     R3,#1
                                                  ADDC    R6,#0
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  SUB     R2,#1
                                                  JMPR    cc_NZ,CopyInitVal
                                                  JMPR    cc_UC,CopyInitDone
                                  
                                  
                                  CopyNearVal:    EXTS    R9,#1
                                                  MOVB    RL5,[R8]
                                                  ADD     R8,#1
                                                  ADDC    R9,#0
                                                  MOVB    [R3],RL5
                                                  ADD     R3,#1
                                  $IF (WATCHDOG = 1)
                                                  SRVWDT                          ; SERVICE WATCHDOG
                                  $ENDIF
                                                  SUB     R2,#1
                                                  JMPR    cc_NZ,CopyNearVal
                                  CopyInitDone:   JNB     R8.0,RepeatInit
                                                  ADD     R8,#1
                                                  ADDC    R9,#0                   ; potential overflow
                                                  JMPR    cc_UC,RepeatInit
                                  
                                  InitBit:        MOVBZ   R3,RL2
                                                  SHL     R3,#1
                                                  OR      R3,#0FD00H              ; START OF BIT SPACE
                                                  MOV     R4,#1
                                                  MOVB    RL5,RH2
                                                  SHL     R4,R5                   ; CALCULATE BIT MASK
                                                  JB      R2.7,SetBit
                                                  CPL     R4                      ; CLEAR BIT
                                                  AND     R4,[R3]
                                                  JMPR    cc_UC,StoreBit
                                  SetBit:         OR      R4,[R3]                 ; SET BIT
                                  StoreBit:       MOV     [R3],R4
                                                  JMPR    cc_UC,RepeatInit
                         1230     $ENDIF ; close block IF (DPP3USE = 1) **************************************** 
                         1231     
                         1232     EndInit:
                         1233     
                         1234     $ENDIF ; close block $IF TINY ************************************************ 
                         1235     
                         1236     $ENDIF ; close $IF (INIT_VARS = 1) ******************************************* 
                         1237     
                         1238     ;------------------------------------------------------------------------------
                         1239     
                                  $IF TINY
                                                  JMP     main
                         1242     $ELSE
0000011C FA?????? E      1243                     JMP     FAR main
                         1244     $ENDIF
                         1245     
                         1246     ?C_RESET        ENDP
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE    20

--------                 1247     ?C_STARTUP_CODE ENDS
                         1248     
                         1249     $IF (INIT_VARS = 1)
                         1250     EXTERN  ?C_ENDINIT:WORD
                         1251     $ENDIF
                         1252     
                         1253     ;******************************************************************************
                         1254     ;                                                                             *
                         1255     ; STRUCTURE OF THE INITIALIZATION INFORMATION                                 *
                         1256     ; -------------------------------------------                                 *
                         1257     ; This section describes the initialization data generated by:                *
                         1258     ;   - C166 for explicit variable initializations (in ?C_INITSEC)              *
                         1259     ;   - L166 to clear memory regions (in ?C_CLRMEMSEC)                          *
                         1260     ;                                                                             *
                         1261     ; Explicit variable initializations at C source level are stored by C166 in   *
                         1262     ; the section ?C_INITSEC.  All partial sections are combined at linker level  *
                         1263     ; to one section.  The section end value DW 0 taken from the library module   *
                         1264     ; ?C_ENDINIT.  This module is included with the ?C_ENDINIT symbol definition. *
                         1265     ;                                                                             *
                         1266     ; Structure of the ?C_INITSEC information:                                    *
                         1267     ;     ?C_INITSECSTART:   [start address label]                                *
                         1268     ;     <typ> + <length>   [WORD]                       ----+  repeated         *
                         1269     ;     <address>          [WORD or DWORD]              ----+  repeated         *
                         1270     ;     <init_data>        [BYTES according to length]  ----+  repeated         *
                         1271     ;     0x0000             [WORD]   <end of list mark>                          *
                         1272     ; Whereby:                                                                    *
                         1273     ;   <typ> :=  0x4000: WORD  near address field,                               *
                         1274     ;             0x0000: DWORD PAG/POF address field (POF part set to DPP3)      *
                         1275     ;             0x8080: set bit                                                 *
                         1276     ;             0x8000: clear bit                                               *
                         1277     ;   <init_data> :=    bytes to copy into memory specified by <address>        *
                         1278     ;   For bit initializations (<typ> = 0x80x0) the address is encoded in the    *
                         1279     ;   <length> field and no further address information is generated.  MSB of   *
                         1280     ;   <length> is the bit pos.  LSB of <length> is the bit address.             *
                         1281     ;                                                                             *
                         1282     ;                                                                             *
                         1283     ; Sections that start with ?xx0? are set to zero in the startup code.  The    *
                         1284     ; address information about these sections are stored by L166 in the section  *
                         1285     ; ?C_CLRMEMSEC.                                                               *
                         1286     ;                                                                             *
                         1287     ; Structure of the ?C_CLRMERSEC information:                                  *
                         1288     ;     ?C_CLRMEMSECSTART: [start address label]                                *
                         1289     ;     <typ> + <length>   [WORD]                       ----+  repeated         *
                         1290     ;     <address>          [WORD or DWORD]              ----+  repeated         *
                         1291     ;     0x0000             [WORD]   <end of list mark>                          *
                         1292     ; Whereby:                                                                    *
                         1293     ;   <typ> :=  0x4000: WORD  near address field,                               *
                         1294     ;             0x8000: DWORD PAG/POF address field (POF part set to DPP3)      *
                         1295     ;             0x0000: bit area                                                *
                         1296     ;   For bit areas (<typ> = 0x0000) the address is encoded as WORD with LSB    *
                         1297     ;   as byte offset to 0xFD00 and MSB as bit number in the addressed byte.     *
                         1298     ;                                                                             *
                         1299     ;******************************************************************************
                         1300     
                         1301                     END
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE    21

SYMBOL TABLE LISTING
------ ----- -------


N A M E             TYPE   VALUE             I  ATTRIBUTES

?C_CLRMEMSECSTART.  WORD   ----                 EXT 
?C_ENDINIT . . . .  WORD   ----                 EXT 
?C_INITSECSTART. .  WORD   ----                 EXT 
?C_MAINREGISTERS .  RBANK                       REGBANK
?C_PAGEDPP0. . . .  DATA16 ----                 EXT 
?C_PAGEDPP1. . . .  DATA16 ----                 EXT 
?C_PAGEDPP2. . . .  DATA16 ----                 EXT 
?C_RESET . . . . .  I-FAR  0H                R  SEC=?C_STARTUP_CODE
?C_STARTUP . . . .  NEAR   0H                R  PUB SEC=?C_STARTUP_CODE
?C_STARTUP_CODE. .  ----   ----              R  SECTION
?C_SYSSTKBOT . . .  DATA16 FA00H             A  PUB 
?C_SYSSTKTOP . . .  DATA16 FC00H             A  PUB 
?C_USERSTACK . . .  ----   ----              R  SECTION
?C_USERSTKTOP. . .  BYTE   200H              R  SEC=?C_USERSTACK
?C_USRSTKBOT . . .  BYTE   0H                R  PUB SEC=?C_USERSTACK
ADCDIS . . . . . .  DATA3  0H                A  
ADDRSEL1 . . . . .  WORD   FE18H             A  SFR
ADDRSEL2 . . . . .  WORD   FE1AH             A  SFR
ADDRSEL3 . . . . .  WORD   FE1CH             A  SFR
ADDRSEL4 . . . . .  WORD   FE1EH             A  SFR
ASC0DIS. . . . . .  DATA3  0H                A  
ASC1DIS. . . . . .  DATA3  0H                A  
BCON0H . . . . . .  DATA3  2H                A  
BCON0L . . . . . .  DATA3  0H                A  
BUSCON0. . . . . .  WORD   FF0CH             A  SFR
BUSCON1. . . . . .  WORD   FF14H             A  SFR
BUSCON2. . . . . .  WORD   FF16H             A  SFR
BUSCON3. . . . . .  WORD   FF18H             A  SFR
BUSCON4. . . . . .  WORD   FF1AH             A  SFR
CAN1DIS. . . . . .  DATA3  0H                A  
CAN2DIS. . . . . .  DATA3  0H                A  
CC1DIS . . . . . .  DATA3  0H                A  
CC2DIS . . . . . .  DATA3  0H                A  
CC6DIS . . . . . .  DATA3  0H                A  
CLKCON . . . . . .  DATA3  0H                A  
CLKREL . . . . . .  DATA3  0H                A  
CP . . . . . . . .  WORD   FE10H             A  SFR
C_STARTUP. . . . .  ----   ----                 
ClearBit . . . . .  NEAR   54H               R  SEC=?C_STARTUP_CODE
ClearFar . . . . .  NEAR   70H               R  SEC=?C_STARTUP_CODE
ClearNear. . . . .  NEAR   86H               R  SEC=?C_STARTUP_CODE
Clr_Memory . . . .  NEAR   30H               R  SEC=?C_STARTUP_CODE
CopyInitVal. . . .  NEAR   D4H               R  SEC=?C_STARTUP_CODE
DP3. . . . . . . .  WORD   FFC6H             A  SFR
DPP0 . . . . . . .  WORD   FE00H             A  SFR
DPP1 . . . . . . .  WORD   FE02H             A  SFR
DPP2 . . . . . . .  WORD   FE04H             A  SFR
DPP3 . . . . . . .  WORD   FE06H             A  SFR
EndClear . . . . .  NEAR   90H               R  SEC=?C_STARTUP_CODE
EndInit. . . . . .  NEAR   11CH              R  SEC=?C_STARTUP_CODE
FMDIS. . . . . . .  DATA3  0H                A  
GPTDIS . . . . . .  DATA3  0H                A  
I2CDIS . . . . . .  DATA3  0H                A  
InitBit. . . . . .  NEAR   FEH               R  SEC=?C_STARTUP_CODE
Init_Vars. . . . .  NEAR   90H               R  SEC=?C_STARTUP_CODE
LenLoad. . . . . .  NEAR   BCH               R  SEC=?C_STARTUP_CODE
Model. . . . . . .  LIT    "NEAR"               
NDATA. . . . . . .  ----   ----                 GROUP
NoDPP3Adj. . . . .  NEAR   F0H               R  SEC=?C_STARTUP_CODE
P3 . . . . . . . .  WORD   FFC4H             A  SFR
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE    22

PCDDIS . . . . . .  DATA3  0H                A  
PDCON. . . . . . .  DATA3  0H                A  
PWMDIS . . . . . .  DATA3  0H                A  
RESET. . . . . . .  INTNO  0000H             A  GLB 
RTS. . . . . . . .  DATA3  0H                A  
R_CLKCFG . . . . .  DATA3  0H                A  
R_CSSEL. . . . . .  DATA3  0H                A  
R_RSTLEN . . . . .  DATA3  0H                A  
R_SALSEL . . . . .  DATA3  0H                A  
R_SUE. . . . . . .  DATA3  0H                A  
RepClearFar. . . .  NEAR   74H               R  SEC=?C_STARTUP_CODE
RepeatClear. . . .  NEAR   3EH               R  SEC=?C_STARTUP_CODE
RepeatInit . . . .  NEAR   98H               R  SEC=?C_STARTUP_CODE
SCS. . . . . . . .  DATA3  0H                A  
SP . . . . . . . .  WORD   FE12H             A  SFR
SSCDIS . . . . . .  DATA3  0H                A  
SSTSZ. . . . . . .  DATA16 200H              A  
STKOV. . . . . . .  WORD   FE14H             A  SFR
STKUN. . . . . . .  WORD   FE16H             A  SFR
SYSCON . . . . . .  WORD   FF12H             A  SFR
SYSCON2. . . . . .  WORD   F1D0H             A  ESFR
SYSCON3. . . . . .  WORD   F1D4H             A  ESFR
SYS_BITS . . . . .  DATA16 FB6FH             A  
SYS_H. . . . . . .  DATA8  10H               A  
SYS_L. . . . . . .  DATA3  4H                A  
SetBit . . . . . .  NEAR   116H              R  SEC=?C_STARTUP_CODE
StoreBit . . . . .  NEAR   118H              R  SEC=?C_STARTUP_CODE
USTSZ. . . . . . .  DATA16 200H              A  
V_XPERCON. . . . .  DATA3  0H                A  
_ALECTL0 . . . . .  DATA3  1H                A  
_ALECTL1 . . . . .  DATA3  0H                A  
_ALECTL2 . . . . .  DATA3  0H                A  
_ALECTL3 . . . . .  DATA3  0H                A  
_ALECTL4 . . . . .  DATA3  0H                A  
_BDRSTEN . . . . .  DATA3  0H                A  
_BOS . . . . . . .  DATA16 FA00H             A  
_BTYP0 . . . . . .  DATA3  3H                A  
_BTYP1 . . . . . .  DATA3  3H                A  
_BTYP2 . . . . . .  DATA3  3H                A  
_BTYP3 . . . . . .  DATA3  3H                A  
_BTYP4 . . . . . .  DATA3  3H                A  
_BUSACT0 . . . . .  DATA3  1H                A  
_BUSACT1 . . . . .  DATA3  0H                A  
_BUSACT2 . . . . .  DATA3  0H                A  
_BUSACT3 . . . . .  DATA3  0H                A  
_BUSACT4 . . . . .  DATA3  0H                A  
_BYTDIS. . . . . .  DATA3  0H                A  
_CLKEN . . . . . .  DATA3  0H                A  
_CSCFG . . . . . .  DATA3  0H                A  
_CSREN0. . . . . .  DATA3  0H                A  
_CSREN1. . . . . .  DATA3  0H                A  
_CSREN2. . . . . .  DATA3  0H                A  
_CSREN3. . . . . .  DATA3  0H                A  
_CSREN4. . . . . .  DATA3  0H                A  
_CSWEN0. . . . . .  DATA3  0H                A  
_CSWEN1. . . . . .  DATA3  0H                A  
_CSWEN2. . . . . .  DATA3  0H                A  
_CSWEN3. . . . . .  DATA3  0H                A  
_CSWEN4. . . . . .  DATA3  0H                A  
_MCTC0 . . . . . .  DATA4  FH                A  
_MCTC1 . . . . . .  DATA4  FH                A  
_MCTC2 . . . . . .  DATA4  FH                A  
_MCTC3 . . . . . .  DATA4  FH                A  
_MCTC4 . . . . . .  DATA4  FH                A  
_MTTC0 . . . . . .  DATA3  0H                A  
_MTTC1 . . . . . .  DATA3  0H                A  
A166 MACRO ASSEMBLER  START167                                                            04/30/2018 11:14:25 PAGE    23

_MTTC2 . . . . . .  DATA3  0H                A  
_MTTC3 . . . . . .  DATA3  0H                A  
_MTTC4 . . . . . .  DATA3  0H                A  
_OWDDIS. . . . . .  DATA3  0H                A  
_PWDCFG. . . . . .  DATA3  0H                A  
_RDYEN0. . . . . .  DATA3  0H                A  
_RDYEN1. . . . . .  DATA3  0H                A  
_RDYEN2. . . . . .  DATA3  0H                A  
_RDYEN3. . . . . .  DATA3  0H                A  
_RDYEN4. . . . . .  DATA3  0H                A  
_RDY_AS0 . . . . .  DATA3  0H                A  
_RDY_AS1 . . . . .  DATA3  0H                A  
_RDY_AS2 . . . . .  DATA3  0H                A  
_RDY_AS3 . . . . .  DATA3  0H                A  
_RDY_AS4 . . . . .  DATA3  0H                A  
_ROMEN . . . . . .  DATA3  0H                A  
_ROMS1 . . . . . .  DATA3  1H                A  
_RWDC0 . . . . . .  DATA3  0H                A  
_RWDC1 . . . . . .  DATA3  0H                A  
_RWDC2 . . . . . .  DATA3  0H                A  
_RWDC3 . . . . . .  DATA3  0H                A  
_RWDC4 . . . . . .  DATA3  0H                A  
_SGTDIS. . . . . .  DATA3  0H                A  
_STKSZ . . . . . .  DATA3  0H                A  
_STKSZ1. . . . . .  DATA3  1H                A  
_TOS . . . . . . .  DATA16 FC00H             A  
_VISIBLE . . . . .  DATA3  0H                A  
_WRCFG . . . . . .  DATA3  1H                A  
_XPEN. . . . . . .  DATA3  1H                A  
_XPERSHARE . . . .  DATA3  0H                A  
main . . . . . . .  NEAR   ----                 EXT 



ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
